/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tke.mobility.support;


import java.awt.Color;
import java.util.ArrayList;
import javax.swing.JComboBox;
import java.util.Date;
import java.awt.event.*;
import java.io.FileInputStream;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
//import javax.swing.*;
import javax.swing.table.DefaultTableModel;
//import xmlcomponents.Jattr;
//import xmlcomponents.*;
//import xmlcomponents.Jocument;
import java.io.IOException;
import java.io.StringReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.text.EditorKit;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.jdom2.input.SAXBuilder;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import org.jdom2.Element;
import org.jdom2.Document;
import org.jdom2.JDOMException;
import org.jdom2.filter.ElementFilter;
import org.dom4j.DocumentException;
import org.dom4j.io.SAXReader;
import org.dom4j.*;
import org.jdom2.util.IteratorIterable;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;









/**
 *
 * @author Rich
 */
public class TKEMobilitySuport extends javax.swing.JFrame {

    String queryToExecute = null;
    Util ut = new Util();
    Vector data;
    Vector columnName;
    int rowCount;
    String WhichDatabase = null;
    String TimeFrame = null;
    String EmployeeId = null;
    StringBuilder sb = null;
    String dateParam = null;
    


    /**
     * Creates new form MainForm
     */
    public TKEMobilitySuport() throws ClassNotFoundException,SQLException {
         initComponents();
         PopulateReportNames(cboReportName);
         PopulateEmployees(cboGetEmployees);
         PopulateDateRange(cboDateRange);
        Util u = new Util();
      // int d =  u.SendEmail();
       
      
        
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cboReportName = new javax.swing.JComboBox();
        lblTime = new javax.swing.JLabel();
        cmdExecute = new javax.swing.JButton();
        cboGetEmployees = new javax.swing.JComboBox();
        cboDateRange = new javax.swing.JComboBox();
        lblRowCount = new javax.swing.JLabel();
        lblConnectivity = new javax.swing.JLabel();
        lblMessage = new javax.swing.JLabel();
        lblQueryTime = new javax.swing.JLabel();
        pnlEnterDateRange = new javax.swing.JPanel();
        txtEndDate = new javax.swing.JTextField();
        txtStartDate = new javax.swing.JTextField();
        lblDateStart = new javax.swing.JLabel();
        lblDateEnd = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        label3 = new java.awt.Label();
        label4 = new java.awt.Label();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        label5 = new java.awt.Label();
        jButton1 = new javax.swing.JButton();
        label6 = new java.awt.Label();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        label7 = new java.awt.Label();
        txtEmployeeId = new javax.swing.JTextField();
        pnlTicketNumber = new javax.swing.JPanel();
        txtTaskTicketNumber = new javax.swing.JTextField();
        mnuBar = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TKE Mobility Support v1.0");
        setAlwaysOnTop(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocationByPlatform(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        cboReportName.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboReportNameItemStateChanged(evt);
            }
        });
        cboReportName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboReportNameActionPerformed(evt);
            }
        });

        cmdExecute.setText("Run");
        cmdExecute.setToolTipText("Run report");
        cmdExecute.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cmdExecuteMousePressed(evt);
            }
        });
        cmdExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExecuteActionPerformed(evt);
            }
        });

        cboGetEmployees.setAutoscrolls(true);
        cboGetEmployees.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboGetEmployeesActionPerformed(evt);
            }
        });

        cboDateRange.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboDateRangeItemStateChanged(evt);
            }
        });
        cboDateRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboDateRangeActionPerformed(evt);
            }
        });

        lblRowCount.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblRowCount.setForeground(new java.awt.Color(51, 51, 255));

        lblConnectivity.setForeground(new java.awt.Color(51, 255, 0));

        lblMessage.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblMessage.setForeground(new java.awt.Color(255, 0, 0));

        pnlEnterDateRange.setToolTipText("Enter Start/End Date (dd-MMM-yy)");

        txtEndDate.setToolTipText("Enter end date \"dd-mon-yy\"");

        txtStartDate.setToolTipText("Enter start date \"dd-mon-yy\"");
        txtStartDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStartDateActionPerformed(evt);
            }
        });

        lblDateStart.setText("Start Date");

        lblDateEnd.setText("End Date");

        javax.swing.GroupLayout pnlEnterDateRangeLayout = new javax.swing.GroupLayout(pnlEnterDateRange);
        pnlEnterDateRange.setLayout(pnlEnterDateRangeLayout);
        pnlEnterDateRangeLayout.setHorizontalGroup(
            pnlEnterDateRangeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEnterDateRangeLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlEnterDateRangeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblDateEnd)
                    .addComponent(lblDateStart))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlEnterDateRangeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtEndDate)
                    .addComponent(txtStartDate, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE))
                .addGap(177, 177, 177))
        );
        pnlEnterDateRangeLayout.setVerticalGroup(
            pnlEnterDateRangeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEnterDateRangeLayout.createSequentialGroup()
                .addGroup(pnlEnterDateRangeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDateStart))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEnterDateRangeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDateEnd)
                    .addComponent(txtEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.setAutoscrolls(true);
        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TabChanged(evt);
            }
        });
        jTabbedPane1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTabbedPane1FocusGained(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(jTable2);

        jTabbedPane1.addTab("Report Data", jScrollPane1);

        jScrollPane5.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane5.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane5.setAutoscrolls(true);

        jTextField1.setEditable(false);
        jTextField1.setText("jTextField1");

        jTextField2.setEditable(false);
        jTextField2.setText("jTextField2");

        jTextField3.setEditable(false);
        jTextField3.setText("jTextField3");

        jTextField4.setEditable(false);
        jTextField4.setText("jTextField4");

        label1.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        label1.setText("Status");

        label2.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        label2.setText("Server 87");

        label3.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        label3.setText("Server 88");

        label4.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        label4.setText("Clients");

        jTextField5.setBackground(new java.awt.Color(240, 240, 240));
        jTextField5.setText("jTextField5");

        jTextField6.setBackground(new java.awt.Color(240, 240, 240));
        jTextField6.setText("jTextField6");

        label5.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        label5.setText("Start Time");

        jButton1.setText("Refresh");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton1MousePressed(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton1KeyPressed(evt);
            }
        });

        label6.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        label6.setText("Overall Status");

        jRadioButton1.setBackground(new java.awt.Color(102, 255, 51));
        jRadioButton1.setText("OK");
        jRadioButton1.setEnabled(false);
        jRadioButton1.setFocusable(false);

        jRadioButton2.setBackground(new java.awt.Color(255, 51, 51));
        jRadioButton2.setText("Problem");
        jRadioButton2.setEnabled(false);
        jRadioButton2.setFocusable(false);

        jRadioButton3.setBackground(new java.awt.Color(102, 255, 51));
        jRadioButton3.setText("OK");
        jRadioButton3.setEnabled(false);
        jRadioButton3.setFocusPainted(false);
        jRadioButton3.setFocusable(false);

        jRadioButton4.setBackground(new java.awt.Color(255, 51, 51));
        jRadioButton4.setText("Problem");
        jRadioButton4.setDoubleBuffered(true);
        jRadioButton4.setEnabled(false);
        jRadioButton4.setFocusable(false);

        label7.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        label7.setText("('BusyThreads','RunningUOWNum','Overbooked','Busy') **Problem indicates possible hung session. Server may require a restart");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label6, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE))
                        .addGap(164, 164, 164)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButton2)))
                        .addGap(85, 85, 85)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jRadioButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButton4))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(319, 319, 319)
                        .addComponent(jButton1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(372, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(label5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jRadioButton1)
                        .addComponent(jRadioButton2)
                        .addComponent(jRadioButton3)
                        .addComponent(jRadioButton4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(jButton1)
                .addContainerGap(155, Short.MAX_VALUE))
        );

        label6.getAccessibleContext().setAccessibleName("");

        jScrollPane5.setViewportView(jPanel1);

        jTabbedPane1.addTab("Antenna Health Check ", jScrollPane5);

        txtEmployeeId.setText("Or Enter Employee Id");
        txtEmployeeId.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                txtEmployeeIdMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                txtEmployeeIdMouseExited(evt);
            }
        });

        txtTaskTicketNumber.setText("Enter Ticket or Task Number");
        txtTaskTicketNumber.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtTaskTicketNumberMouseClicked(evt);
            }
        });
        txtTaskTicketNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTaskTicketNumberActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlTicketNumberLayout = new javax.swing.GroupLayout(pnlTicketNumber);
        pnlTicketNumber.setLayout(pnlTicketNumberLayout);
        pnlTicketNumberLayout.setHorizontalGroup(
            pnlTicketNumberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtTaskTicketNumber)
        );
        pnlTicketNumberLayout.setVerticalGroup(
            pnlTicketNumberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTicketNumberLayout.createSequentialGroup()
                .addComponent(txtTaskTicketNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        setJMenuBar(mnuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblQueryTime, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(256, 256, 256)
                        .addComponent(lblMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(lblConnectivity))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(459, 459, 459)
                        .addComponent(cmdExecute))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(cboReportName, 0, 235, Short.MAX_VALUE)
                                        .addComponent(cboGetEmployees, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(txtEmployeeId, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(78, 78, 78)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(pnlTicketNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cboDateRange, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(39, 39, 39)
                                .addComponent(pnlEnterDateRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblRowCount, javax.swing.GroupLayout.PREFERRED_SIZE, 766, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(208, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(lblMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlEnterDateRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cboReportName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboDateRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cboGetEmployees, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtEmployeeId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(pnlTicketNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addComponent(lblRowCount, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(cmdExecute)
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(98, 98, 98)
                .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblQueryTime, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(lblConnectivity))
        );

        lblTime.getAccessibleContext().setAccessibleName("lblTime");
        lblTime.getAccessibleContext().setAccessibleDescription("");
        jTabbedPane1.getAccessibleContext().setAccessibleName("Report Data");

        getAccessibleContext().setAccessibleParent(this);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cboReportNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboReportNameActionPerformed
   
             
    }//GEN-LAST:event_cboReportNameActionPerformed


    
    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        Date dt = new Date();
        lblTime.setText(dt.toString());
        //pnlTicketNumber.setVisible(false);
        pnlEnterDateRange.setVisible(false);
       // jTable2.setVisible(false);       
        try {
            try {
                displayHC();
              
               
                
            } catch (JDOMException ex) {
                Logger.getLogger(TKEMobilitySuport.class.getName()).log(Level.SEVERE, null, ex);
            }
            catch (DocumentException ex) {
                Logger.getLogger(TKEMobilitySuport.class.getName()).log(Level.SEVERE, null, ex);
            }

        } catch (IOException ex) {
            Logger.getLogger(TKEMobilitySuport.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (Exception ex) {
            Logger.getLogger(TKEMobilitySuport.class.getName()).log(Level.SEVERE, null, ex);
        }
           
        
    
    
    }//GEN-LAST:event_formWindowActivated
Boolean Validate(){
    Util ut = new Util();
    String msg = "";
    Boolean val = true;
    if(txtEmployeeId.getText().equals("Or Enter Employee Id" ) && cboGetEmployees.getSelectedIndex() == 0 ){
        val = false;
        msg = msg +  "Please enter an employee id , or select from list!\n";
        cmdExecute.setText("Run");
        cmdExecute.setForeground(Color.black);
 
        
    }
        if(cboReportName.getSelectedIndex() == 0){
        val = false;
        msg = msg + "Please select a report!\n";
        cmdExecute.setText("Run");
         cmdExecute.setForeground(Color.black);
    }
    
    if(cboDateRange.getSelectedIndex() == 0){
        val = false;
        msg = msg + "Please select a timeframe, or enter valid dates!";
        cmdExecute.setText("Run");
         cmdExecute.setForeground(Color.black);
    }
    if(pnlEnterDateRange.isVisible()){
        if(txtStartDate.getText().isEmpty()){
            val = false;
            msg = msg + "Please select a valid start date!";
              cmdExecute.setText("Run");
         cmdExecute.setForeground(Color.black);
        }
           if(txtEndDate.getText().isEmpty()){
            val = false;
            msg = msg + "Please select a valid end date!";
              cmdExecute.setText("Run");
         cmdExecute.setForeground(Color.black);
        }
    }
    
    if(!txtStartDate.getText().isEmpty() && !txtEndDate.getText().isEmpty()){
//           if(!Util.ValidateDate(txtStartDate.getText().toString())){
//              val = false;
//              msg = msg + "Please select a valid start date format (dd-Mon-yy)!";
//          }     if(!Util.ValidateDate(txtEndDate.getText().toString())){
//              val = false;
//              msg = msg + "Please select a valid end date format (dd-Mon-yy)!";
//          }
         if(txtStartDate.getText().toString().matches( "^[0-9]{1,2}-[a-zA-Z]{3}-[0-9]{2}$"))
         {
          val = true;
          
         }
         else
         {
          val= false;
          msg = msg + "Please select a valid start date format (dd-Mon-yy)!";
         }
         if(txtEndDate.getText().toString().matches( "^[0-9]{1,2}-[a-zA-Z]{3}-[0-9]{2}$"))
         {
          val = true;
         }
         else
         {
          val= false;
          msg = msg + "Please select a valid end date format (dd-Mon-yy)!";
         }
          
    }
     if (!val){
         lblRowCount.setForeground(Color.red);
         lblRowCount.setText(msg);
         //ut.ShowErrorMessage(msg);
     }
     else{
         lblRowCount.setForeground(Color.BLUE);
     }
    
    return val;
}

    private void cmdExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExecuteActionPerformed
 
        String query = null;
        Date bmin = new Date();
        long elapsedTime = 0;
         //**************************//
          Util.SaveDates c = new Util.SaveDates();
          String d1 =  c.GetDate1(txtStartDate.getText());
          String d2 =  c.GetDate2(txtEndDate.getText());
          

         //TODAY
        if(cboDateRange.getSelectedItem().equals("Today")){

                    TimeFrame = " And trunc(creation_date)  Between trunc(sysdate) and trunc(sysdate)";
                      if(pnlEnterDateRange.isVisible()){
                        TimeFrame = String.format(" And trunc(creation_date)  Between '%s' and '%s'",d1 ,d2 );
                    }
                      //SVG
                    if (cboReportName.getSelectedItem().equals("Tickets sent to Mobile from SVG"))
                    {
                        TimeFrame = " and trunc(imp.updateddt) between trunc(sysdate) and trunc(sysdate)";
                        if(pnlEnterDateRange.isVisible()){
                            TimeFrame = String.format(" And trunc(imp.updateddt)  Between '%s' and '%s'",d1 ,d2 );
                            }
                    }
                    //ANT
                    if (cboReportName.getSelectedItem().equals("AMP Device Connectivity"))
                    {
                        TimeFrame = " and trunc(ch.eventtime) between trunc(sysdate) and trunc(sysdate)";
                        if(pnlEnterDateRange.isVisible()){
                            TimeFrame = String.format(" And trunc(ch.eventtime)  Between '%s' and '%s'",d1 ,d2 );
                            }
                    }
                    //ANTINTG
                    if (cboReportName.getSelectedItem().equals("Ticket Status (BC)"))
                    {
                        TimeFrame = " and trunc(creationdate) between trunc(sysdate) and trunc(sysdate)";
                        if(pnlEnterDateRange.isVisible()){
                            TimeFrame = String.format(" And trunc(creationdate)  Between '%s' and '%s'",d1 ,d2 );
                            }
                    }
                  
        }
        //WEEK
         else if(cboDateRange.getSelectedItem().equals( "7 days ago")){
      
                    TimeFrame = " and trunc(creation_date) Between trunc(sysdate)-7 and trunc(sysdate)";
                        if(pnlEnterDateRange.isVisible()){
                        TimeFrame = String.format(" And trunc(creation_date)  Between '%s' and '%s'",d1 ,d2 );
                    }
                     //ANT
                    if (cboReportName.getSelectedItem().equals("Tickets sent to Mobile from SVG"))
                    {
                        TimeFrame = " and trunc(imp.updateddt) between trunc(sysdate)-7 and trunc(sysdate)";
                            if(pnlEnterDateRange.isVisible()){
                        TimeFrame = String.format(" And trunc(imp.updateddt)  Between '%s' and '%s'",d1 ,d2 );
                    }
                    }
                    //ANT
                    if (cboReportName.getSelectedItem().equals("AMP Device Connectivity"))
                    {
                        TimeFrame = " and trunc(ch.eventtime) between trunc(sysdate)-7 and trunc(sysdate)";
                        if(pnlEnterDateRange.isVisible()){
                            TimeFrame = String.format(" And trunc(ch.eventtime)  Between '%s' and '%s'",d1 ,d2 );
                            }
                    }
                   //ANTINTG
                    if (cboReportName.getSelectedItem().equals("Ticket Status (BC)"))
                    {
                        TimeFrame = " and trunc(creationdate) between trunc(sysdate)-7 and trunc(sysdate)";
                        if(pnlEnterDateRange.isVisible()){
                            TimeFrame = String.format(" And trunc(creationdate)  Between '%s' and '%s'",d1 ,d2 );
                            }
                    }
        }
           //2 WEEKS
               else  if(cboDateRange.getSelectedItem().equals("2 weeks ago")){
                    TimeFrame = " and trunc(creation_date) Between trunc(sysdate)-14 and trunc(sysdate)";
                        if(pnlEnterDateRange.isVisible()){
                        TimeFrame = String.format(" And trunc(creation_date)  Between '%s' and '%s'",d1 ,d2 );
                        }
                        //SVG
                     if (cboReportName.getSelectedItem().equals("Tickets sent to Mobile from SVG"))
                    {
                        TimeFrame = " and trunc(imp.updateddt) between trunc(sysdate)-14 and trunc(sysdate)";
                         if(pnlEnterDateRange.isVisible()){
                       TimeFrame = String.format(" And trunc(imp.updateddt)  Between '%s' and '%s'",d1 ,d2 );
                        }
                    }
                     //ANT
                    if (cboReportName.getSelectedItem().equals("AMP Device Connectivity"))
                    {
                        TimeFrame = " and trunc(ch.eventtime) between trunc(sysdate)-14 and trunc(sysdate)";
                        if(pnlEnterDateRange.isVisible()){
                            TimeFrame = String.format(" And trunc(ch.eventtime)  Between '%s' and '%s'",d1 ,d2 );
                            }
                    } 
                    //ANTINTG
                    if (cboReportName.getSelectedItem().equals("Ticket Status (BC)"))
                    {
                        TimeFrame = " and trunc(creationdate) between trunc(sysdate)-14 and trunc(sysdate)";
                        if(pnlEnterDateRange.isVisible()){
                            TimeFrame = String.format(" And trunc(creationdate)  Between '%s' and '%s'",d1 ,d2 );
                            }
                    }
        }
               //1 MONTH
         else   if(cboDateRange.getSelectedItem().equals("1 month ago")){
                    TimeFrame = " and trunc(creation_date) Between trunc(sysdate)-30 and trunc(sysdate) ";

                        if(pnlEnterDateRange.isVisible()){
                          TimeFrame = String.format(" And trunc(creation_date)  Between '%s' and '%s'",d1 ,d2 );
                        }
                        //SVG
                    if (cboReportName.getSelectedItem().equals("Tickets sent to Mobile from SVG"))
                    {
                        TimeFrame = " and trunc(imp.updateddt) Between trunc(sysdate)-30 and trunc(sysdate)  "; 
                            if(pnlEnterDateRange.isVisible()){
                         TimeFrame = String.format(" And trunc(imp.updateddt)  Between '%s' and '%s'",d1 ,d2 );
                            }
                    }
                    //ANT
                  if (cboReportName.getSelectedItem().equals("AMP Device Connectivity"))
                    {
                        TimeFrame = " and trunc(ch.eventtime) between trunc(sysdate)-30 and trunc(sysdate)";
                        if(pnlEnterDateRange.isVisible()){
                            TimeFrame = String.format(" And trunc(ch.eventtime)  Between '%s' and '%s'",d1 ,d2 );
                            }
                    }
                   //ANTINTG
                    if (cboReportName.getSelectedItem().equals("Ticket Status (BC)"))
                    {
                        TimeFrame = " and trunc(creationdate) between trunc(sysdate)-30 and trunc(sysdate)";
                        if(pnlEnterDateRange.isVisible()){
                            TimeFrame = String.format(" And trunc(creationdate)  Between '%s' and '%s'",d1 ,d2 );
                            }
                    }
                    
        }
                 else   if(cboDateRange.getSelectedItem().equals("Let me enter dates")){
                      TimeFrame = " and trunc(creation_date) Between trunc(sysdate)-30 and trunc(sysdate) ";
                       if(pnlEnterDateRange.isVisible()){
                         TimeFrame = String.format(" And trunc(creation_date)  Between '%s' and '%s'",d1 ,d2 );
                        }
                       //SVG
                    if (cboReportName.getSelectedItem().equals("Tickets sent to Mobile from SVG"))
                    {
                        TimeFrame = " and trunc(imp.updateddt) Between trunc(sysdate)-30 and trunc(sysdate)  ";  
                           if(pnlEnterDateRange.isVisible()){
                                TimeFrame = String.format(" And trunc(imp.updateddt)  Between '%s' and '%s'",d1 ,d2 );
                        }
                    }
                    //ANT
                    if (cboReportName.getSelectedItem().equals("AMP Device Connectivity"))
                    {
                        TimeFrame = " and trunc(ch.eventtime) between trunc(sysdate) and trunc(sysdate)";
                        if(pnlEnterDateRange.isVisible()){
                            TimeFrame = String.format(" And trunc(ch.eventtime)  Between '%s' and '%s'",d1 ,d2 );
                            }
                    }
                   //ANTINTG
                    if (cboReportName.getSelectedItem().equals("Ticket Status (BC)"))
                    {
                        TimeFrame = " and trunc(creationdate) between trunc(sysdate) and trunc(sysdate)";
                        if(pnlEnterDateRange.isVisible()){
                            TimeFrame = String.format(" And trunc(creationdate)  Between '%s' and '%s'",d1 ,d2 );
                            }
                    }
                    
        }
    
        //**************************//

          if (cboReportName.getSelectedItem().equals("Debriefs sent from Mobile"))
          {   
              WhichDatabase = "OOD";
              try{
                     EmployeeId = ParseEmployee(cboGetEmployees);
                   }
              catch(Exception x)
              {}
              query = StringConstants.MechanicDebriefs; 
              sb = new StringBuilder(query);
              sb.append(TimeFrame);
              if(EmployeeId != null){
                    sb.append( " and employee_id = nvl(" + EmployeeId + ",employee_id)");
                   
              }
              else
              {
                   sb.append( " and employee_id = nvl(" + txtEmployeeId.getText() + ",employee_id)");
              }
            if(!txtTaskTicketNumber.getText().equalsIgnoreCase("Enter Ticket or Task Number")  )
            {
                   if(txtTaskTicketNumber.getText().length() != 0)
                   {
                        sb.append(" AND task_id = nvl("+ txtTaskTicketNumber.getText() + ",task_id)");
                   }
            }     
              sb.append(" order by creation_date desc");
              query = sb.toString();
           
          }
           else if(cboReportName.getSelectedItem().equals("Repair/Construction ToolBox Talks tickets posted"))
          {
             
              WhichDatabase = "OOD"; 
                try{
                     EmployeeId = ParseEmployee(cboGetEmployees);
                   }
              catch(Exception x)
              {}
                 query = StringConstants.RepairToolBoxTicketsPosted;
              sb = new StringBuilder(query);
              sb.append(TimeFrame);
              if(EmployeeId != null) {
                  sb.append( " and mec.person_id = nvl(" + EmployeeId + ",mec.person_id)");
                  
              }
              else
              {
                  sb.append( " and mec.person_id = nvl(" + txtEmployeeId.getText() + ",mec.person_id)");
              }
            if(!txtTaskTicketNumber.getText().equalsIgnoreCase("Enter Ticket or Task Number")  )
            {
                   if(txtTaskTicketNumber.getText().length() != 0)
                   {
                        sb.append(" AND mec.TASK_NUMBER = nvl("+ txtTaskTicketNumber.getText() + ",mec.TASK_NUMBER)");
                   }
            }     
              sb.append(" ORDER BY mec.TRANSACTION_ID DESC");
              query = sb.toString();
                
          }
          else if(cboReportName.getSelectedItem().equals("Tickets sent to Mobile from SVG"))
          {
              dateParam = "SVGDate";
               try{
                     EmployeeId = ParseEmployee(cboGetEmployees);
                   }
              catch(Exception x)
              {}
              query = StringConstants.TicketsSentToDeviceFromSVG;
              WhichDatabase = "SVG";  
              sb = new StringBuilder(query);
              sb.append(TimeFrame); 
              if(EmployeeId != null) {
                  sb.append( " and employeehostid = nvl(" + EmployeeId + ",employeehostid)");
                  
              }
              else{
                   sb.append( " and employeehostid = nvl(" + txtEmployeeId.getText() + ",employeehostid)");
              }
              sb.append(" Order by imp.UPDATEDDT desc ");
              query = sb.toString();              
          }
          else if(cboReportName.getSelectedItem().equals("Repair/Construction Tickets Posted"))
          {
                try{
                     EmployeeId = ParseEmployee(cboGetEmployees);
                   }
              catch(Exception x)
              {}
              WhichDatabase = "OOD";    
              query = StringConstants.TicketsPostedForRepCon;
              sb = new StringBuilder(query);
              sb.append(TimeFrame);
              if(EmployeeId != null) {
                  sb.append( " and req.mechanic_emp_reference= nvl(" + EmployeeId + ",req.mechanic_emp_reference)");
                  
              }
              else{
                   sb.append( " and  req.mechanic_emp_reference = nvl(" + txtEmployeeId.getText() + ",req.mechanic_emp_reference)");
              }
            if(!txtTaskTicketNumber.getText().equalsIgnoreCase("Enter Ticket or Task Number")  )
            {
                   if(txtTaskTicketNumber.getText().length() != 0)
                   {
                        sb.append(" AND req.TASK_NUMBER = nvl("+ txtTaskTicketNumber.getText() + ",req.TASK_NUMBER)");
                   }
            }     
              sb.append(" ORDER BY req.TRANSACTION_ID DESC");
              query = sb.toString();
                       
          }
          //ANT
          else if(cboReportName.getSelectedItem().equals("AMP Device Connectivity"))
          {
                try{
                     EmployeeId = ParseEmployee(cboGetEmployees);
                   }
              catch(Exception x)
              {}
              WhichDatabase = "ANT";    
              query = StringConstants.AntennaDeviceConnectivity;
              sb = new StringBuilder(query);
              sb.append(TimeFrame);
              if(EmployeeId != null) {
                  sb.append( String.format(" and s.subscriberid = nvl( '%s', s.subscriberid )",EmployeeId));                
              } 
              else
              { 
                  sb.append( String.format(" and s.subscriberid = nvl( '%s', s.subscriberid )" , txtEmployeeId.getText()));                
              }
              sb.append(" order by ch.EventTime desc)");
              query = sb.toString();
                       
          }
          
          //Business Continuity
          else if(cboReportName.getSelectedItem().equals("Ticket Status (BC)")){
                      try{
                             EmployeeId = ParseEmployee(cboGetEmployees);
                   }
              catch(Exception x)
              {}
              WhichDatabase = "ANTINTG";    
              query = StringConstants.TicketHistory;
              sb = new StringBuilder(query);
              sb.append(TimeFrame);
              // TODO Add Ticket Number
              if(EmployeeId != null) {
                  sb.append( String.format(" and pdapersonid = nvl( '%s', pdapersonid )",EmployeeId));                
              } 
              else if (EmployeeId == null)
              { 
                  sb.append( String.format(" and pdapersonid= nvl( '%s', pdapersonid )" , txtEmployeeId.getText()));                
              }
              if(pnlTicketNumber.isVisible() && txtTaskTicketNumber.getText().length() != 0 && !txtTaskTicketNumber.getText().equalsIgnoreCase("Enter Ticket or Task Number") ){               
                  sb.append(String.format(" and ticketid = NVL( '%s', ticketid) ",txtTaskTicketNumber.getText()));                
              }
  
              sb.append(" order by creationdate desc");
              query = sb.toString();
          }
          
          
          //AMP Health Check       
      //    else if(cboReportName.getSelectedItem().equals("Antenna Health Check")){
//              jTable2.setVisible(false);
//              
//              
//         
//
//            //Get columns into array
//             String [] columns = {"Name","StartTime","Status","Clients","ThreadPool","LoadFactor" ,"BusyThreads","CurrentQueueLength","RunningUOWNum","AverageExecutionTime","AverageWaitTime","WaitingUOWNum","SuspendedUOWNum","TotalUOWNum","LongUOWNum","Overbooked","Busy","ThreadCount","MaintenanceMode","FreeJvmMemory","TotalJvmMemory","CpuUtilization","TcpInbound","TcpOutbound","FreeRamMemory","TotalRamMemory"};
//            //Get Data
//      class KeyValuePair
//            {
//                public String key;
//                public String value;
//
//                public KeyValuePair(String k, String v)
//                {
//                    key = k;
//                    value = v;
//                }
//            }

// ArrayList containing the data to display in the table.
//ArrayList <KeyValuePair> list = new ArrayList<KeyValuePair>();
//for(int i=0;i<arList.size();i++)
//{
//    list.add(new KeyValuePair(arList.get(i).toString(),arList.get(i).toString()));
//    System.out.println(list.get(i).value.toString());
//}

// Instantiate JTable and DefaultTableModel, and set it as the
// TableModel for the JTable.
//JTable table = new JTable();
//DefaultTableModel model = new DefaultTableModel();
//table.setModel(model);
//jTable2.setModel(model);
//model.setColumnIdentifiers(columns);
//
//// Populate the JTable (TableModel) with data from ArrayList
//for (KeyValuePair p : list)
//{
//    model.addRow(new String[] {p.key, p.value});
//     // model.addRow();
//}          
//         table.setVisible(true);
//}    
         
          ResultSet rs = null;        
          Date dt = new Date();
         if(Validate()){
       try{
           Date emin = null;
          if(!query.isEmpty()){
                MyDBConnection connection = new MyDBConnection();
                rs = connection.connect(query,WhichDatabase); 
                //Display data   
                DefaultTableModel model = ut.BuildTableModel(rs);
                jTable2.setModel(model);
                 emin = new Date();
                  
                if(model.getRowCount()  < 1){
                      lblRowCount.setForeground(Color.red);
                      lblRowCount.setText("Query returned no records!");
                      cmdExecute.setForeground(Color.BLACK);
                      cmdExecute.setText("Run");  
                    //ut.ShowErrorMessage("Query returned no records!");
                }                
                else{
                   
                    lblRowCount.setText(String.format("%d record(s) found.",model.getRowCount()));
                }                            
          }  
          elapsedTime = emin.getTime() - bmin.getTime();
          elapsedTime = (elapsedTime/1000);
       
         
        }
         catch (SQLException ex)
        { 
            lblMessage.setText(ex.getMessage());
            //ut.ShowErrorMessage(ex.getMessage());
            java.util.logging.Logger.getLogger(TKEMobilitySuport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
         catch (ClassNotFoundException ex)
        {          
            lblMessage.setText(ex.getMessage());
            // ut.ShowErrorMessage(ex.getMessage());
            java.util.logging.Logger.getLogger(TKEMobilitySuport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
           jTable2.setVisible(true);
          lblTime.setText(String.format("Query last run: %s",dt.toString()));
          lblQueryTime.setText(String.format("Query execution time: %s",SetTimeElapsed(elapsedTime)));
   
         }
         else
         {    
             cmdExecute.setForeground(Color.BLACK);
             cmdExecute.setText("Run");  
             //return;    
             
           
         }
    }//GEN-LAST:event_cmdExecuteActionPerformed
  public String ParseEmployee(JComboBox cbo){
                String val ="";  
                int start = cbo.getSelectedItem().toString().indexOf("(");
                int end = cbo.getSelectedItem().toString().indexOf(":");
                val = cbo.getSelectedItem().toString().substring(start+1, end);
            return val;
  }
  public String ParseElement(String val){            
                int start = val.toString().indexOf(";");
                int end = val.length();
                val = val.toString().substring(start+1, end );
            return val;
  }
  
  public ArrayList  ParseXMLDocElementArray(String [] elementValue){
ArrayList a = new ArrayList();
    try{
        SAXBuilder builder = new SAXBuilder();
      String hurl  = "http://tkeantennaprod.oracleoutsourcing.com:9090/hc?stats=true&debug=true"; 
                           Document document  = (Document)builder.build(hurl);
                           Element rootNode = document.getRootElement();
                          // ElementFilter elementFilter = new ElementFilter();      
                           for( String e : elementValue)
                           { 
                                 ElementFilter elementFilter = new ElementFilter(e); 
                                    for(Element table : document.getDescendants(elementFilter))
                                     {      
                                            // System.out.println(table.getValue());
                                             a.add(table.getValue());
                                             //System.out.println(a); 
                                     }                         
              }
    }
              catch (IOException io) {
		System.out.println(io.getMessage());
	  }
              catch (JDOMException jdomex) {
		System.out.println(jdomex.getMessage());
	  } 
    return a;
}   
public ArrayList  ParseXMLDoc(String elementValue){
ArrayList a = new ArrayList();
    try{
        SAXBuilder builder = new SAXBuilder();
      String hurl  = "http://tkeantennaprod.oracleoutsourcing.com:9090/hc?stats=true&debug=true"; 
                           Document document  = (Document)builder.build(hurl);
                           Element rootNode = document.getRootElement();
                           ElementFilter elementFilter = new ElementFilter(elementValue);      
                           
                          for(Element table : document.getDescendants(elementFilter))
                           {       
                                  // System.out.println(table.getValue());
                                   a.add(table.getValue());
                                   //System.out.println(a); 
                           }                         
              }
              catch (IOException io) {
		System.out.println(io.getMessage());
	  }
              catch (JDOMException jdomex) {
		System.out.println(jdomex.getMessage());
	  } 
    return a;
}      
        
  void displayHC() throws IOException, JDOMException, DocumentException, Exception{
       SAXBuilder builder = new SAXBuilder();

                        
            EditorKit ek = null ;
            String elemName;
            String hurl  = "http://tkeantennaprod.oracleoutsourcing.com:9090/hc?stats=true&debug=true";   
           Document document  = (Document)builder.build(hurl);
            Element rootNode = document.getRootElement();
            ElementFilter elementFilter = new ElementFilter("Status");  
            for(Element e: document.getDescendants(elementFilter))  {
                if(e.getValue().equals("RUNNING")){
                
                }
            } 
//            jEditorPane1.getEditorKit();
//            jEditorPane1.setEditorKit(ek);
//           // jEditorPane1.setPage(hurl);
//             jEditorPane1.setPage("http://tkeantennaprod.oracleoutsourcing.com:9090/hc?stats=true&debug=true");
//            String Text = jEditorPane1.getText();  
     
            
            
            
   
                
            }

  

  

  
  public ArrayList GetHealthCheckInfo(String [] ElementList){
       SAXBuilder builder = new SAXBuilder();
       ArrayList list = new ArrayList();
              try{
                  String hurl  = "http://tkeantennaprod.oracleoutsourcing.com:9090/hc?stats=true&debug=true"; 
                           Document document  = (Document)builder.build(hurl);
                           Element rootNode = document.getRootElement();
                           for(String s : ElementList){                         
                           ElementFilter elementFilter = new ElementFilter(s);
                           
                           for(Element table : document.getDescendants(elementFilter))
                           {
                                   System.out.println(table.getChildren().size());
                                   System.out.println(table.getName() + " --> " + table.getValue());                                  
                                   list.add(table.getName() + "; " + table.getValue()); 
                                   list.add(table.getValue());    
                           }
                         }
              }
              catch (IOException io) {
		System.out.println(io.getMessage());
	  }
              catch (JDOMException jdomex) {
		System.out.println(jdomex.getMessage());
	  }
              
              return list;
  }
  
  public String SetTimeElapsed(long elapsedTime){
     String retVal = null;
     if(elapsedTime >0){
                try{
                        if(elapsedTime < 59) {
                             retVal  = elapsedTime + " secs.";
                        }
                        if(elapsedTime > 60) {
                             retVal  = elapsedTime /60  + " min(s). "  +  elapsedTime%60 + " secs.";              
                        }             
                 }
                 catch(Exception e){} 
        }
      return retVal;   
  }
    
    
    private void cboGetEmployeesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboGetEmployeesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboGetEmployeesActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        
      
    }//GEN-LAST:event_formWindowClosing
 public void actionPerformed(ActionEvent e) 
    {
        JComboBox nameCombo = (JComboBox)e.getSource();
        String newSelection = (String)nameCombo.getSelectedItem();   
    }


    private void cboDateRangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboDateRangeActionPerformed
      //  "Today;7 days ago;2 weeks ago;All"    
      Util.SaveDates c = new Util.SaveDates();
      String d1 = c.GetDate1(txtStartDate.getText());
      String d2 =  c.GetDate2(txtEndDate.getText());
    }//GEN-LAST:event_cboDateRangeActionPerformed

    private void cmdExecuteMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdExecuteMousePressed
        cmdExecute.setForeground(Color.red);
        cmdExecute.setText("Working....");
        
    }//GEN-LAST:event_cmdExecuteMousePressed

    private void txtTaskTicketNumberMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtTaskTicketNumberMouseClicked
        txtTaskTicketNumber.setText("");// TODO add your handling code here:
    }//GEN-LAST:event_txtTaskTicketNumberMouseClicked

    private void cboDateRangeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboDateRangeItemStateChanged
        // TODO add your handling code here:
        evt.getStateChange();
        evt.getItem();
        if(cboDateRange.getSelectedItem().equals("Let me enter dates")){
            pnlEnterDateRange.setVisible(true);
        }
         if(!cboDateRange.getSelectedItem().equals("Let me enter dates")){
            pnlEnterDateRange.setVisible(false);
        }

        
    }//GEN-LAST:event_cboDateRangeItemStateChanged
  
    private void txtStartDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStartDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStartDateActionPerformed

    private void cboReportNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboReportNameItemStateChanged
        // TODO add your handling code here:
        if(cboReportName.getSelectedItem().equals("Antenna Health Check")){
           cboGetEmployees.setEnabled(false);
           cboDateRange.setEnabled(false);
           jTable2.setVisible(false);
        }
         if(!cboReportName.getSelectedItem().equals("Antenna Health Check")){
           cboGetEmployees.setEnabled(true);
           cboDateRange.setEnabled(true);
           jTable2.setVisible(true);
        }
         
         
        if(!cboReportName.getSelectedItem().equals("Choose Report")){
 
                if(cboReportName.getSelectedItem().equals("Ticket Status (BC)"))
                {
                    pnlTicketNumber.setVisible(true);
                }
              else  if(cboReportName.getSelectedItem().toString().equalsIgnoreCase("Repair/Construction Tickets Posted"))
                        {
                            pnlTicketNumber.setVisible(true);
                        }
                else{
                    pnlTicketNumber.setVisible(false);
                }
             
          }
      
        
    }//GEN-LAST:event_cboReportNameItemStateChanged

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
       //PopoulateHealthCheckPanel();
    PopulateHealthCheckValues();
    Boolean flag ,flag0;
        flag = CheckHealthCheckThreadPools87();
        flag0 = CheckHealthCheckThreadPools88();
        if (!flag){
            jRadioButton1.setSelected(false);
             jRadioButton2.setSelected(true);
             jRadioButton2.setBackground(Color.red);
        }
        else
        {
             jRadioButton1.setSelected(true);
             jRadioButton2.setSelected(false);
        }
        
          if (!flag0){
            jRadioButton3.setSelected(false);
            jRadioButton4.setSelected(true);
             jRadioButton2.setBackground(Color.red);
        }
          else{
                jRadioButton3.setSelected(true);
                jRadioButton4.setSelected(false);
          }
    }//GEN-LAST:event_formWindowOpened

    private void jTabbedPane1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTabbedPane1FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jTabbedPane1FocusGained

    private void TabChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TabChanged
        // TODO add your handling code here:
        //PopoulateHealthCheckPanel();
    }//GEN-LAST:event_TabChanged

    private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyPressed
    
    }//GEN-LAST:event_jButton1KeyPressed

    private void jButton1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MousePressed
         jButton1.setForeground(Color.red);
         jButton1.setText("Refreshing....");
    }//GEN-LAST:event_jButton1MousePressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        PopulateHealthCheckValues();        
        Boolean flag ,flag0;
        flag = CheckHealthCheckThreadPools87();
        flag0 = CheckHealthCheckThreadPools88();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtTaskTicketNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTaskTicketNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTaskTicketNumberActionPerformed

    private void txtEmployeeIdMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtEmployeeIdMouseEntered
      if(txtEmployeeId.getText().equals("Or Enter Employee Id")){
         txtEmployeeId.setText("");
      }
       
    }//GEN-LAST:event_txtEmployeeIdMouseEntered

    private void txtEmployeeIdMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtEmployeeIdMouseExited
      if(txtEmployeeId.getText().equals("")){
        txtEmployeeId.setText("Or Enter Employee Id");
      }
    }//GEN-LAST:event_txtEmployeeIdMouseExited
     void PopulateHealthCheckValues(){
         String [] elements = new String[3];
         elements[0] = "Status";
         elements[1] = "Clients";
         elements[2] = "StartTime";
        // elements[3] = "Busy"; //87 6,7,8,9  88 10,11,12,13
        // elements[4] = "Overbooked"; //87 14,15,16,17    88 18,19,20,21
        // elements[5] = "RunningUOWNum";//87 22,23,24,25,26 88 27,28,29,30
        // elements[6] = "BusyThreads";//87 31,32,33,34 88 35,36,37,38

        ArrayList ar =  ParseXMLDocElementArray(elements);
        jTextField1.setText(ar.get(0).toString());
        jTextField2.setText(ar.get(1).toString());
        jTextField3.setText(ar.get(2).toString());
        jTextField4.setText(ar.get(3).toString());
        jTextField5.setText(ar.get(4).toString());
        jTextField6.setText(ar.get(5).toString());
        jButton1.setForeground(Color.BLACK);
        jButton1.setText("Refresh");  
        Date dt = new Date();
        lblTime.setText(String.format("Query last run: %s",dt.toString()));
     }
     private Boolean CheckHealthCheckThreadPools87(){
         Boolean flag = true;
         Boolean flag0 = true;
         int HealthCheckRunningUOWNum = StringConstants.HealthCheckRunningUOWNum;
         int HealthCheckBusyThreads = StringConstants.HealthCheckBusyThreads;
         String [] elements = new String[4];
         elements[0] = "Busy"; //87 6,7,8,9  88 10,11,12,13
         elements[1] = "Overbooked"; //87 14,15,16,17    88 18,19,20,21
         elements[2] = "RunningUOWNum";//87 22,23,24,25,26 88 27,28,29,30
         elements[3] = "BusyThreads";//87 31,32,33,34 88 35,36,37,38
         ArrayList ar =  ParseXMLDocElementArray(elements);
         //Loop through 87 records
         //Busy 0-7
          for (int i = 0;i<3;i++){
              if(ar.get(i).equals(StringConstants.HealthCheckBusy)){
                  flag = false;
              }
          }
         //Overbooked
         for (int k = 8;k<11;k++){
                 if(ar.get(k).equals(StringConstants.HealthCheckOverBooked)){
                  flag = false;
              }
          }
         //RuningUOWNum
         for (int t = 16;t<19;t++){
                 if(ar.get(t).equals(HealthCheckRunningUOWNum)){
                  flag = false;
              }
          }
         //BusyThreads
         for (int p = 24;p<27;p++){
                 if(ar.get(p).equals(HealthCheckBusyThreads)){
                  flag = false;
              }
          }
         //       //Loop through 88 records
         //Busy 0-7
          for (int x = 4;x<7;x++){
              if(ar.get(x).equals(StringConstants.HealthCheckBusy)){
                  flag= false;
              }
          }
         //Overbooked
         for (int y = 12;y<15;y++){
                 if(ar.get(y).equals(StringConstants.HealthCheckOverBooked)){
                  flag = false;
              }
          }
         //RuningUOWNum
         for (int z = 20;z<23;z++){
                 int i = Integer.parseInt(ar.get(z).toString());
                 if(i >=  HealthCheckRunningUOWNum)
                     {
                  flag = false;
              }
          }
         //BusyThreads
         for (int f = 28;f<31;f++){
                 int i = Integer.parseInt(ar.get(f).toString());
                 if(i >=  HealthCheckBusyThreads)
                     {
                  flag = false;
              }
          }
         return flag;
     }
     
       private Boolean CheckHealthCheckThreadPools88(){
         Boolean flag = true;
         Boolean flag0 = true;
         int HealthCheckRunningUOWNum = StringConstants.HealthCheckRunningUOWNum;
         int HealthCheckBusyThreads = StringConstants.HealthCheckBusyThreads;
         String [] elements = new String[4];
         elements[0] = "Busy"; //87 6,7,8,9  88 10,11,12,13
         elements[1] = "Overbooked"; //87 14,15,16,17    88 18,19,20,21
         elements[2] = "RunningUOWNum";//87 22,23,24,25,26 88 27,28,29,30
         elements[3] = "BusyThreads";//87 31,32,33,34 88 35,36,37,38
         ArrayList ar =  ParseXMLDocElementArray(elements);

         //Busy 0-7
          for (int x = 4;x<7;x++){
              if(ar.get(x).equals(StringConstants.HealthCheckBusy)){
                  flag0 = false;
              }
          }
         //Overbooked
         for (int y = 12;y<15;y++){
                 if(ar.get(y).equals(StringConstants.HealthCheckOverBooked)){
                  flag0 = false;
              }
          }
         //RuningUOWNum
         for (int z = 20;z<23;z++){
               int i = Integer.parseInt(ar.get(z).toString());
                 if(i >=  HealthCheckRunningUOWNum)
                     {
                  flag = false;
              }
          }
         //BusyThreads
         for (int f = 28;f<31;f++){
               int i = Integer.parseInt(ar.get(f).toString());
                 if(i >=  HealthCheckBusyThreads)
                     {
                  flag = false;
              }
          }
         return flag0;
     }    
       
       private void cmdRefresh88ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add yRefresour handling code here:
       // Refresh88();
    }    public void PopulateReportNames(javax.swing.JComboBox box){
        String strReports = StringConstants.reportNames;
        String [] arReports = strReports.split(";");
        for (String s : arReports )
        {
            box.addItem(s);             
        }
      } 
       public void PopulateDateRange(javax.swing.JComboBox box){
        String strReports = StringConstants.PopulateDateCriteria;
        String [] arReports = strReports.split(";");
        box.addItem("Select Date Range");
        for (String s : arReports )
        {
            box.addItem(s);             
        }
      } 
    public void PopulateEmployees(javax.swing.JComboBox box) throws ClassNotFoundException,SQLException {
        MyDBConnection db = new MyDBConnection();
        //ResultSet rs = db.connect("SELECT NAME FROM CUSTOMER");
        ResultSet rs = db.connect(StringConstants.PopulateEmployees,"SVG");
        box.addItem("Select Employee");
        while (rs.next()){
            box.addItem(rs.getString("Employee"));
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws ClassNotFoundException,SQLException {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } 
        catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TKEMobilitySuport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
            catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TKEMobilitySuport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
            catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TKEMobilitySuport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
            catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TKEMobilitySuport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
           
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {  
                try {
                    new TKEMobilitySuport().setVisible(true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(TKEMobilitySuport.class.getName()).log(Level.SEVERE, null, ex);
                }
                catch (SQLException ex) {
                    Logger.getLogger(TKEMobilitySuport.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
        });
} 
   
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JComboBox cboDateRange;
    public javax.swing.JComboBox cboGetEmployees;
    private javax.swing.JComboBox cboReportName;
    public javax.swing.JButton cmdExecute;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label5;
    private java.awt.Label label6;
    private java.awt.Label label7;
    public javax.swing.JLabel lblConnectivity;
    private javax.swing.JLabel lblDateEnd;
    private javax.swing.JLabel lblDateStart;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JLabel lblQueryTime;
    public javax.swing.JLabel lblRowCount;
    private javax.swing.JLabel lblTime;
    public javax.swing.JMenuBar mnuBar;
    public javax.swing.JPanel pnlEnterDateRange;
    private javax.swing.JPanel pnlTicketNumber;
    private javax.swing.JTextField txtEmployeeId;
    private javax.swing.JTextField txtEndDate;
    private javax.swing.JTextField txtStartDate;
    public javax.swing.JTextField txtTaskTicketNumber;
    // End of variables declaration//GEN-END:variables
}
